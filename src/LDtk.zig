const std = @import("std");

const json = struct {
    pub fn object(value_opt: ?std.json.Value) ?std.json.ObjectMap {
        const value = value_opt orelse return null;
        return switch (value) {
            .Object => |obj| obj,
            else => null,
        };
    }

    pub fn array(value_opt: ?std.json.Value) ?std.json.Array {
        const value = value_opt orelse return null;
        return switch (value) {
            .Array => |arr| arr,
            else => null,
        };
    }

    pub fn string(value_opt: ?std.json.Value) ?[]const u8 {
        const value = value_opt orelse return null;
        return switch (value) {
            .String => |str| str,
            else => null,
        };
    }

    pub fn boolean(value_opt: ?std.json.Value) ?bool {
        const value = value_opt orelse return null;
        return switch (value) {
            .Bool => |b| b,
            else => null,
        };
    }

    pub fn integer(value_opt: ?std.json.Value) ?i64 {
        const value = value_opt orelse return null;
        return switch (value) {
            .Integer => |int| int,
            else => null,
        };
    }

    pub fn enum_from_value(comptime T: type, value_opt: ?std.json.Value) ?T {
        const value = value_opt orelse return null;
        return switch (value) {
            .String => |str| std.meta.stringToEnum(T, str),
            else => null,
        };
    }

    pub fn pos_from_value(value_opt: ?std.json.Value) ?[2]i64 {
        const value = array(value_opt) orelse return null;
        return .{
            integer(value[0]) orelse return null,
            integer(value[1]) orelse return null,
        };
    }

    pub fn posf_from_value(value_opt: ?std.json.Value) ?[2]i64 {
        const value = array(value_opt) orelse return null;
        return .{
            float(value[0]) orelse return null,
            float(value[1]) orelse return null,
        };
    }
};


/// 1. LDtk Json root
pub const Root = struct {
    bgColor: []const u8,
    defs: ?Definitions = null,
    externalLevels: bool,
    jsonVersion: []const u8,
    levels: []Level,
    worldGridHeight: ?i64 = null,
    worldGridWidth: ?i64 = null,
    worldLayout: ?WorldLayout = null,
    worlds: ?[]World = null,
};

/// 1.1. World
pub const World = struct {
    identifier: []const u8,
    iid: []const u8,
    levels: []Level,
    worldGridHeight: i64,
    worldGridWidth: i64,
    worldLayout: WorldLayout,
};

pub const WorldLayout = enum {
    Free,
    GridVania,
    LinearHorizontal,
    LinearVertical,
};

/// 2. Level
pub const Level = struct {
    __bgColor: ?[]const u8,
    __bgPos: ?struct {
        cropRect: [4]f64,
        scale: [2]f64,
        topLeftPx: [2]i64,
    },
    __neighbours: []Neighbour,
    bgRelPath: ?[]const u8,
    externalRelPath: ?[]const u8,
    fieldInstances: []FieldInstance,
    identifier: []const u8,
    iid: []const u8,
    layerInstances: ?[]LayerInstance,
    pxHei: i64,
    pxWid: i64,
    uid: i64,
    worldDepth: i64,
    worldX: i64,
    worldY: i64,
};

pub const Neighbour = struct {
    dir: []const u8,
    levelIid: []const u8,
    levelUid: ?i64 = null,
};

/// 2.1. Layer instance
pub const LayerInstance = struct {
    /// Grid-based height
    __cHei: i64,
    /// Grid-based width
    __cWid: i64,
    /// Grid size
    __gridSize: i64,
    /// Layer definition identifier
    __identifier: []const u8,
    /// Layer opacity as Float [0-1]
    __opacity: f64,
    /// Total layer X pixel offset, including both instance and definition offsets
    __pxTotalOffsetX: i64,
    /// Total layer Y pixel offset, including both instance and definition offsets
    __pxTotalOffsetY: i64,
    /// The definition UID of corresponding Tileset, if any
    __tilesetDefUid: ?i64,
    /// The relative path to corresponding Tileset, if any
    __tilesetRelPath: ?[]const u8,
    /// Layer type (possible values: IntGrid, Entities, Tiles, or AutoLayer)
    __type: LayerType,
    /// An array containing all tiles generated by Auto-layer rules. The array is laready sorted in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.).
    /// Note: if multiple tiles are stacked in the same cell as the result of rules, all tiles behind opaque ones will be discarded.
    autoLayerTiles: []TileInstance,
    entityInstances: []EntityInstance,
    gridTiles: []TileInstance,
    iid: []const u8,
    intGridCsv: []i64,
    layerDefUid: i64,
    levelId: i64,
    overrideTilesetUid: ?i64,
    pxOffsetX: i64,
    pxOffsetY: i64,
    visible: bool,
    /// WARNING: this deprecated value is no longer exported since version 1.0.0
    /// Replaced by: intGridCsv
    intGrid: ?[][]const u8 = null,

    pub fn fromJSON(alloc: std.mem.Allocator, layer_value: std.json.Value) !LayerInstance {
        const layer_obj = object(layer_value) orelse return error.InvalidLayer;
        const __type = enum_from_value(LayerType, layer.get("__type")) orelse return error.InvalidType;
        const grid = grid: {
            if (__type == .IntGrid and array(layer.get("intGridCsv"))) |intGridCsv| grid: {
                const grid = std.ArrayList(i64).initCapacity(alloc, intGridCsv.items.len);
                defer grid.deinit();

                for (grid) |int| {
                    grid.appendAssumeCapacity(integer(int) orelse return error.InvalidInt);
                }

                break :grid grid.toOwnedSlice();
            }
            break :grid &[0]i64{};
        };
        return LayerInstance {
            .__cHei = integer(layer_obj.get("__cHei")) orelse return error.InvalidCHei,
            .__cWid = integer(layer_obj.get("__cWid")) orelse return error.InvalidCWid,
            .__gridSize = integer(layer_obj.get("__gridSize")) orelse return error.InvalidGridSize,
            .__identifier = string(layer_obj.get("__identifier")) orelse return error.InvalidIdentifier,
            .__opacity = float(layer_obj.get("__opacity")) orelse return error.InvalidOpacity,
            .__pxTotalOffsetX = integer(layer_obj.get("__pxTotalOffsetX")) orelse return error.InvalidTotalOffsetX,
            .__pxTotalOffsetY = integer(layer_obj.get("__pxTotalOffsetY")) orelse return error.InvalidTotalOffsetY,
            .__tilesetDefUid = integer(layer_obj.get("__tilesetDefUid")) orelse return error.InvalidTilesetDefUid,
            .__tilesetRelPath = integer(layer_obj.get("__tilesetRelPath")) orelse return error.InvalidTilesetRelPath,
            .__type = __type,
            .autoLayerTiles = try TileInstance.fromJSON(alloc, layer_obj.get("autoLayerTiles")),
            .entityInstances = try EntityInstance.fromJSON(alloc, layer_obj.get("entityInstances")),
            .gridTiles = try TileInstance.fromJSON(alloc, layer_obj.get("gridTiles")),
            .iid = string(layer_obj.get("iid")) orelse return error.InvalidIID,
            .intGridCsv = grid,
            .levelId = integer(layer_obj.get("levelId")) orelse return error.InvalidLevelId,
            .overrideTilesetUid = integer(layer_obj.get("overrideTilesetUid")) orelse return error.InvalidOverrideTilesetUid,
            .pxOffsetX = integer(layer_obj.get("pxOffsetX")) orelse return error.InvalidPxOffsetX,
            .pxOffsetY = integer(layer_obj.get("pxOffsetY")) orelse return error.InvalidPxOffsetY,
            .visible = boolean(layer_obj.get("visible")) orelse return error.InvalidVisible,
        };
    }

    pub fn fromJSONMany(alloc: std.mem.Allocator, layers: std.json.Array) ![]LayerInstance {
        var ldtk_layers = try std.ArrayList(LayerInstance).initCapacity(alloc, layers.items.len);
        defer ldtk_layers.deinit(); // levels will be returned using toOwnedSlice
        for (layers.items) |layer_value| {
            ldtk_layers.appendAssumeCapacity(try fromJSON(layer_value));
        }
        return ldtk_layers.toOwnedSlice();
    }
};

const LayerType = enum {
    IntGrid,
    Entities,
    Tiles,
    AutoLayer,
};

/// 2.2. Tile instance
const TileInstance = struct {
    /// "Flip bits", a 2-bits integer to represent the mirror transformations of the tile.
    /// - Bit 0 = X flip
    /// - Bit 1 = Y flip
    f: FlipBits,
    /// Pixel coordinates of the tile in the layer ([x, y] format). Don't forget optional layer offsets, if they exist!
    px: [2]i64,
    /// Pixel coordinates of the tile in the tileset ([x, y] format)
    src: [2]i64,
    /// The Tile ID in the corresponding tileset
    t: i64,

    pub fn fromJSON(tile: std.json.Value) !TileInstance {
        const f = @intToEnum(FlipBits, integer(tile.get("f")) orelse return error.InvalidFlipBits);
        const px = pos_from_value(tile.get("px")) orelse return error.InvalidPx;
        const src = pos_from_value(tile.get("src")) orelse return error.InvalidSrc;
        const t = integer(tile.get("t")) orelse return error.InvalidT;
        return TileInstance{
            .f = f,
            .px = px,
            .src = src,
            .t = t,
        };
    }
};

const FlipBits = enum(u4) {
    NoFlip = 0,
    XFlip = 1,
    YFlip = 2,
    XYFlip = 3,
};

/// 2.3. Entity instance
const EntityInstance = struct {
    __grid: [2]i64,
    __identifier: []const u8,
    __pivot: [2]f32,
    __smartColor: []const u8,
    __tags: [][]const u8,
    __tile: ?TilesetRectangle,
    defUid: i64,
    fieldInstances: []FieldInstance,
    height: i64,
    iid: []const u8,
    px: [2]i64,
    width: i64,

    pub fn fromJSON(alloc: std.mem.Allocator, entity: std.json.Value) !TileInstance {
        const __grid = pos_from_value(tile.get("__grid")) orelse return error.InvalidGrid;
        const __identifier = string(tile.get("__identifier")) orelse return error.InvalidIdentifier;
        const __pivot = posf_from_value(tile.get("__pivot")) orelse return error.InvalidPivot;
        const __smartColor = string(tile.get("__smartColor")) orelse return error.InvalidSmartColor;
        const __tags = pos_from_value(tile.get("__tags")) orelse return error.InvalidTags;
        const __tile: ?[]TilesetRectangle = null; // TilesetRectangle.fromJSON();
        const defUid = integer(tile.get("defUid")) orelse return error.InvalidDefUid;
        const fieldInstances = try FieldInstance.fromJSON(alloc);
        const height = integer(tile.get("height")) orelse return error.InvalidHeight;
        const iid = string(tile.get("iid")) orelse return error.InvalidIid;
        const px = pos_from_value(tile.get("px")) orelse return error.InvalidPx;
        const width = integer(tile.get("width")) orelse return error.InvalidWidth;

        return EntityInstance{
            .__grid = __grid,
            .__identifier = __identifier,
            .__pivot = __pivot,
            .__smartColor = __smartColor,
            .__tags = __tags,
            .__tile = __tile,
            .defUid = defUid,
            .fieldInstances = fieldInstances,
            .height = height,
            .iid = iid,
            .px = px,
            .width = width,
        };
    }
};

/// 2.4. Field Instance
pub const FieldInstance = struct {
    __identifier: []const u8,
    __tile: ?TilesetRectangle,
    // TODO: type and value have many possible values and are not always strings.
    // Figure out if we can use JSON.parse for this
    __type: []const u8,
    __value: []const u8,
    defUid: i64,

    pub fn fromJSON(alloc: std.mem.Allocator, field: std.json.Value) !FieldInstance {
        const __identifier = string(field.get("__identifier")) orelse return error.InvalidIdentifier;
        const __tile = string(field.get("__tile")) orelse return error.InvalidTile;
        const __type = string(field.get("__type")) orelse return error.InvalidType;
        const __value = string(field.get("__value")) orelse return error.InvalidValue;
        const defUid = integer(field.get("defUid")) orelse return error.InvalidIDefUid;
        return FieldInstance {
            .__identifier = __identifier,
            .__tile = __tile,
            .__type = __type,
            .__value = __value,
        };
    }
};

const FieldType = union(enum) {
    Int,
    Float,
    String,
    Enum: []const u8,
    Bool,
};

/// 2.4.2 Field instance entity reference
const FieldInstanceRef = struct {
    entityIid: []const u8,
    layerIid: []const u8,
    levelIid: []const u8,
    worldIid: []const u8,
};

/// 2.4.3 Field instance grid point
const FiledInstanceGridPoint = struct {
    cx: i64,
    cy: i64,
};

/// 3. Definitions
/// Only 2 definitions you might need here are Tilesets and Enums
const Definitions = struct {
    entities: []EntityDefinition,

    enums: []EnumDefinition,
    /// Same as enums, excepts they have a relPath to point to an external source file
    externalEnums: []EnumDefinition,
    layers: []LayerDefinition,
    /// All custom fields available to all levels
    levelFields: []FieldDefinition,
    /// All tilesets
    tilesets: []TilesetDefinition,
};

/// 3.1. Layer definition
const LayerDefinition = struct {
    __type: enum {
        IntGrid,
        Entities,
        Tiles,
        AutoLayer,
    },
    autoSourceLayerDefUid: ?i64,
    displayOpacity: f64,
    gridSize: i64,
    identifier: []const u8,
    intGridValues: []struct { color: []const u8, identifier: ?[]const u8, value: i64 },
    parallaxFactorX: f64,
    parallaxFactorY: f64,
    parallaxScaling: bool,
    pxOffsetX: i64,
    pxOffsetY: i64,
    /// Reference to the default Tileset UID used by this layer definition.
    /// WARNING: some layer instances might use a different tileset. So most of the time, you should probably use the __tilesetDefUid value found in layer instances.
    /// NOTE: since version 1.0.0, the old autoTilesetDefUid was removed and merged into this value.
    tilesetDefUid: ?i64,
    /// Unique Int identifier
    uid: i64,
    /// WARNING: this deprecated value will be removed completely on version 1.2.0+
    /// Replaced by: tilesetDefUid
    autoTilesetDefUid: ?i64 = null,
};

/// 3.1.1. Auto-layer rule definition
const AutoLayerRuleDefinition = opaque {};

/// 3.2. Entity definition
const EntityDefinition = struct {
    color: []const u8,
    height: i64,
    identifier: []const u8,
    nineSliceBorders: [4]i64,
    pivotX: f64,
    pivotY: f64,
    tileRect: TilesetRectangle,
    tileRenderMode: enum { Cover, FitInside, Repeat, Stretch, FullSizeCropped, FullSizeUncropped, NineSlice },
    tilesetId: ?i64,
    uid: i64,
    width: i64,
    /// WARNING: this deprecated value will be removed completely on version 1.2.0+
    /// Replaced by tileRect
    tileId: ?i64 = null,
};

/// 3.2.1. Field definition
const FieldDefinition = []const u8;

/// 3.2.2. Tileset rectangle
const TilesetRectangle = struct {
    h: i64,
    tilesetUid: i64,
    w: i64,
    x: i64,
    y: i64,
};

/// 3.3. Tileset definition
const TilesetDefinition = struct {
    __cHei: i64,
    __cWid: i64,
    customData: []struct {
        data: []const u8,
        tileId: i64,
    },
    embedAtlas: ?enum { LdtkIcons },
    enumTags: []struct {
        enumValueId: []const u8,
        tileIds: []i64,
    },
    identifier: []const u8,
    padding: i64,
    pxHei: i64,
    pxWid: i64,
    relPath: ?[]const u8,
    spacing: i64,
    tags: [][]const u8,
    tagsSourceEnumUid: ?i64,
    tileGridSize: i64,
    uid: i64,
};

/// 3.4. Enum definition
const EnumDefinition = struct {
    externalRelPath: ?[]const u8,
    iconTilesetUid: ?i64,
    identifier: []const u8,
    tags: [][]const u8,
    uid: i64,
    values: []EnumValueDefinition,
};

/// 3.4.1. Enum value definition
const EnumValueDefinition = struct {
    __tileSrcRect: ?[4]i64,
    color: i64,
    id: []const u8,
    tileId: ?i64,
};
